<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>我们一起学Python-三、数据类型与变量（2）—— 字符串</title>
      <link href="/2018/09/03/Python-3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/09/03/Python-3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%20%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h2 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h2><p>除了数字之外，Python还可以操作字符串，可以用几种方式来表示。单引号和双引号都能输出一样的结果。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'spam eggs'</span>  <span class="comment"># single quotes</span></span><br><span class="line"><span class="string">'spam eggs'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'doesn\'t'</span>  <span class="comment"># use \' to escape the single quote...</span></span><br><span class="line"><span class="string">"doesn't"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"doesn't"</span>  <span class="comment"># ...or use double quotes instead</span></span><br><span class="line"><span class="string">"doesn't"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'"Yes," they said.'</span></span><br><span class="line"><span class="string">'"Yes," they said.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"\"Yes,\" they said."</span></span><br><span class="line"><span class="string">'"Yes," they said.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'"Isn\'t," they said.'</span></span><br><span class="line"><span class="string">'"Isn\'t," they said.'</span></span><br></pre></td></tr></table></figure><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> | P | y | t | h | o | n |</span><br><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> 0   1   2   3   4   5   6</span><br><span class="line">-6  -5  -4  -3  -2  -1</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我们一起学Python-三、数据类型与变量（1）—— 数值类型</title>
      <link href="/2018/09/03/Python-3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/09/03/Python-3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h2><p>Python中的整数的类型为整型（int），带小数点的数字叫做浮点型（float）。后面我们还会提到更多的数值类型。</p><h3 id="1-1-整数运算"><a href="#1-1-整数运算" class="headerlink" title="1.1 整数运算"></a>1.1 整数运算</h3><p>整数是不带小数部分的数字，如 14、-11和0 。Python支持4种基本算术运算：+(加)、-(减)、*(乘)、/(除)。Python还使用**和%分别表示乘方和求余，// 表示整除，例如，25%7的值为4，因为25除以7的余数为4 。下面是一些示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">9</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">22</span> - <span class="number">6</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12</span> * <span class="number">14</span></span><br><span class="line"><span class="number">168</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">22</span> / <span class="number">7</span>  <span class="comment"># 注意：除（/）总是会返回一个浮点型的值</span></span><br><span class="line"><span class="number">3.142857142857143</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">4</span><span class="comment"># python中用 ** 来表示乘方， ^ 是位运算中的操作符</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">22</span> // <span class="number">7</span><span class="comment"># // 是整除运算符，运算结果只保留整数部分</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">25</span> % <span class="number">7</span><span class="comment"># % 求余</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="1-2-浮点数运算"><a href="#1-2-浮点数运算" class="headerlink" title="1.2 浮点数运算"></a>1.2 浮点数运算</h3><p>浮点数运算运行使用的是<strong>浮点数</strong>。在Python中，浮点数是带小数点的数字，例如，-3.1 ，11.14 ，10.0 都是浮点数。</p><p>所有适用于整数的算术运算都可用于浮点数，包括%（求余）和 // （整除）。</p><h4 id="1-2-1-浮点数字面量"><a href="#1-2-1-浮点数字面量" class="headerlink" title="1.2.1 浮点数字面量"></a>1.2.1 浮点数字面量</h4><p>对于非常大或非常小的浮点数，通常用科学记数法来表示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 8.8 ** -14</span><br><span class="line">5.987459515064978e-14</span><br></pre></td></tr></table></figure><p>e-14表示将它前面的数字乘以10的-6次方。如果愿意，你可以直接使用科学记数法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2e+03 <span class="comment"># 加号可以省略，写做：2e03</span></span><br><span class="line">2000.0</span><br></pre></td></tr></table></figure><h4 id="1-2-2-溢出"><a href="#1-2-2-溢出" class="headerlink" title="1.2.2 溢出"></a>1.2.2 溢出</h4><p>与整数不同，浮点数存在上限和下限，超出上限或下限将导致溢出错误，溢出错误意味着计算结果太大或太小，Python无法将其表示为浮点数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 11.4**1002</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">OverflowError: (34, <span class="string">'Numerical result out of range'</span>)</span><br></pre></td></tr></table></figure><h4 id="1-2-3-精度有限"><a href="#1-2-3-精度有限" class="headerlink" title="1.2.3 精度有限"></a>1.2.3 精度有限</h4><p>无论在哪种计算机上，浮点数的精度都是一个无法解决的难题。在计算机中，数字用二进制表示，但并非所有的浮点数都可用二进制精确地表示。即便在简单的情况下，也可能出现问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1-2/3</span><br><span class="line">0.33333333333333337</span><br></pre></td></tr></table></figure><p>结果应该是小数点后面有无穷个3，但这里只包含17位。其次，最后一位也不对，应该是3而不是7 。</p><p>​ <strong>tips</strong>：一般而言，应优先考虑使用整数而不是浮点数，因为他们更精确且绝不会溢出。</p><h4 id="1-2-4-复数"><a href="#1-2-4-复数" class="headerlink" title="1.2.4 复数"></a>1.2.4 复数</h4><p>Python提供了内置的复数支持。</p><ul><li><p>j来标记虚数</p></li><li><p>复数可以分离实部虚部</p><p>-复数.real (实部)</p><p>-复数.imag (虚部)</p></li><li><p>复数的共轭</p><p>-复数.conjugate()</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1j</span></span><br><span class="line"><span class="number">1j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1j</span> * <span class="number">1j</span></span><br><span class="line">(<span class="number">-1</span> + <span class="number">0j</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-长度不受限制"><a href="#1-3-长度不受限制" class="headerlink" title="1.3 长度不受限制"></a>1.3 长度不受限制</h3><p>与其他大多数编程语言不同，Python对整数的长度没有限制，你可以执行数十位甚至数百数千位的整数运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">14</span> ** <span class="number">114</span></span><br><span class="line"><span class="number">45561295805358480009792971803280291297175988483278058598019727398980460381355718731361281345841645083428173033122033249515540054016</span></span><br></pre></td></tr></table></figure><h3 id="1-4-求值顺序"><a href="#1-4-求值顺序" class="headerlink" title="1.4 求值顺序"></a>1.4 求值顺序</h3><p>​                                      表 3-1 基本算数运算符</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">加法</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">减法</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">乘法</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">除法</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">整除</td><td style="text-align:center">//</td></tr><tr><td style="text-align:center">求余</td><td style="text-align:center">%</td></tr><tr><td style="text-align:center">乘方</td><td style="text-align:center">**</td></tr></tbody></table><p>表3-1总结了Python基本算数运算符，并案优先级从低到高的顺序将它们编组。例如，计算表达式1 + 2 <em> 3，Python先执行 </em> ，在执行 + ，因为 <em> 的优先级更高（因此，这个表达式的值为7，而不是9）。优先级相同的运算符按书写顺序计算。要改变计算顺序，可以使用圆括号 () ，例如 (1 + 2) </em> 3的结果为9 。换句话说，Python算术运算的规则与常规算术运算相同。</p><h3 id="1-5-其他数学函数"><a href="#1-5-其他数学函数" class="headerlink" title="1.5 其他数学函数"></a>1.5 其他数学函数</h3><p>Python自带了很多由编写好的代码组成的模块，math就是其中之一。表3-2列出了math模块中的一些最常用的函数。</p><p>​                                                                   表3-2 模块math中的一些函数</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">ceil(x)</td><td style="text-align:center">大于或等于x的整数</td></tr><tr><td style="text-align:center">cos(x)</td><td style="text-align:center">x的余弦</td></tr><tr><td style="text-align:center">degree(x)</td><td style="text-align:center">将x弧度转换为度数</td></tr><tr><td style="text-align:center">exp(x)</td><td style="text-align:center">e的x次方</td></tr><tr><td style="text-align:center">factorial(n)</td><td style="text-align:center">计算n的阶乘(n!)。n!=1 <em> 2 </em> 3…* n ，其中n必须是整数</td></tr><tr><td style="text-align:center">log(x)</td><td style="text-align:center">以e为底的x的对数</td></tr><tr><td style="text-align:center">log(x, b)</td><td style="text-align:center">以b为底的x的对数</td></tr><tr><td style="text-align:center">pow(x, y)</td><td style="text-align:center">x的y次方</td></tr><tr><td style="text-align:center">radians(x)</td><td style="text-align:center">将x度转换为弧度数</td></tr><tr><td style="text-align:center">sin(x)</td><td style="text-align:center">x的正弦</td></tr><tr><td style="text-align:center">sqrt(x)</td><td style="text-align:center">x的平方根</td></tr><tr><td style="text-align:center">tan(x)</td><td style="text-align:center">x的正切</td></tr></tbody></table><h4 id="1-5-1-使用返回值"><a href="#1-5-1-使用返回值" class="headerlink" title="1.5.1 使用返回值"></a>1.5.1 使用返回值</h4><p>这些函数返回一个值，这意味着它们的结果为整数或浮点数，具体随函数而异。</p><p>在可以使用数字的任何地方，都可使用这些函数。Python自动执行函数，并将函数调用替换为返回值。</p><h4 id="1-5-2-导入模块"><a href="#1-5-2-导入模块" class="headerlink" title="1.5.2 导入模块"></a>1.5.2 导入模块</h4><p>要使用模块math或其他任何Python模块，都必须先导入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import math</span><br></pre></td></tr></table></figure><p>这样就可以访问任何数学函数了，方法是在函数前面加上math. 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; math.sqrt(5)</span><br><span class="line">2.23606797749979</span><br></pre></td></tr></table></figure><p>下面是另一种导入模块的方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from math import *</span><br></pre></td></tr></table></figure><p>这样调用math模块中的任何函数时，都无需在前面加上math. 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">log</span>(14 + 10)</span><br><span class="line">3.1780538303479458</span><br></pre></td></tr></table></figure><p><strong>tips</strong>: 你还可导入模块math的特定函数，例如，from math import sqrt, tan 只导入函数sqrt和tan。关于模块的详细用法将会在后面提到。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我们一起学Python-二、第一个Python程序</title>
      <link href="/2018/09/02/Python-2-%E7%AC%AC%E4%B8%80%E4%B8%AAPython%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/09/02/Python-2-%E7%AC%AC%E4%B8%80%E4%B8%AAPython%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="2-Python运行方式（一）——-交互式命令-shell"><a href="#2-Python运行方式（一）——-交互式命令-shell" class="headerlink" title="2. Python运行方式（一）—— 交互式命令 shell"></a>2. Python运行方式（一）—— 交互式命令 shell</h2><p>交互式命令顾名思义就是有交互的命令，即输入一行命令，系统马上给你反馈，这是Python的一种运行方式。<br>还记得前面提到的终端怎么开吗？</p><a id="more"></a><p>对，打开它，输入Python，你会看到下面的东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 18:10:19) </span><br><span class="line">[GCC 7.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>开头Python后面的数字指出了你运行的Python版本，’&gt;&gt;&gt;’是Python shell 提示符。有这个的地方就是你输入代码的地方，而没有’&gt;&gt;&gt;’的则是Python输出的东西。你可以一眼就能分辨出哪些内容来自你，哪些来自Python。<br>好，下面请在你的’&gt;&gt;&gt;’ 后面输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure></p><p>紧接着屏幕上也输出了‘Hello world!’对不对，效果大概是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">"Hello world!"</span>)</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>好，这就是我们的第一个Python程序，输出Hello world!</p><p>虽然只有一行代码，但这也是实实在在的程序哦～</p><p>PS：简单的打印一个字符串的小程序，在别的语言中可能需要几行代码才能实现。</p><h2 id="2-2-Print-语句"><a href="#2-2-Print-语句" class="headerlink" title="2.2 Print 语句"></a>2.2 Print 语句</h2><p>我们的第一个程序中用到了Print语句，作用就是将字符串打印到屏幕上，是Python的标准内置函数。它十分灵活，你可以将任意数量的字符串传递给print，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">"Hello"</span>,<span class="string">"world!"</span>)</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>默认情况下，print在标准输出窗口中打印每个字符串，并用空格分隔他们。想要修改字符串之间的分隔符号？简单！只需要添加一个参数 ‘sep’ 即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">"Hello"</span>,<span class="string">"world!"</span>,sep=<span class="string">"."</span>)</span><br><span class="line">Hello.world!</span><br></pre></td></tr></table></figure><p>默认情况下，print打印完指定内容后会添加一个换行符：\n，将光标移至下一行，当然在Shell方式中我们感受不到这种差别，但还是要提一下以备日后使用。想让print实现打印完指定内容后不换行，可将此print的结束字符指定为空字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello,world!"</span>,end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h2 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h2><p>本篇文章主要介绍了：</p><p>1、Python的一种运行方式——交互式命令：在终端中直接运行，每输入一行代码，便会执行，返回结果；</p><p>2、print语句的基本用法：print(‘字符串’1, ‘字符串2’,…, sep=’ ‘,  end=’\n’), print默认空格分隔每个字符串，打印完毕自动换行，我们可以给其指定自己想要的参数来实现自己想要的效果。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我们一起学Python-一、安装Python</title>
      <link href="/2018/09/01/Python-1.%E5%AE%89%E8%A3%85Python/"/>
      <url>/2018/09/01/Python-1.%E5%AE%89%E8%A3%85Python/</url>
      <content type="html"><![CDATA[<p>因为Python是跨平台的，它可以运行在Windows、Mac和各种Linux/Unix系统上。在Windows上写Python程序，放到Linux上也是能够运行的。</p><p>目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的。由于3.x版越来越普及，我们的学习将以最新的Python 3.6版本为基础。请确保你的电脑上安装的Python版本是最新的3.6.x，这样，我们才能无痛的共同学习。<br><a id="more"></a></p><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>如果是用linux各种发行版的各位大佬，我相信，装个Python3应该不是什么难事儿吧，这里就不赘述了。</p><h2 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h2><p>如果你正在使用Mac，那么系统自带的Python版本可能是是2.7。要安装最新的Python 3.6，有两个方法：</p><p>方法一：从Python官网下载Python 3.6的安装程序（网速慢的同学请移步国内镜像），双击运行并安装；</p><p>方法二：如果安装了Homebrew，直接通过命令brew install python3安装即可。</p><h2 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h2><p>请到官网下载需要的版本的安装包， 下载所需(注意自己的系统是32位还是64位)，安装路径最好选择默认, 不然对于新手容易出现各种问题。</p><p>Windows 安装附加要点:<br> 设置环境变量:<br>    1.找到安装路径, 默认 C:\Users**你的用户名<strong>\AppData\Local\Programs\Python\Python{版本}<br>    2.我的电脑 - 属性 - 高级 - 环境变量 - 系统变量中的PATH为（复制路径）: C:\Users\</strong>你的用户名**\AppData\Local\Programs\Python\Python{版本};</p><p> pip3 设置环境变量:  C:\Users**你的用户名**\AppData\Local\Programs\Python\Python{版本}\Scripts;</p><h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><p>在终端执行以下代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, world!"</span>)</span><br></pre></td></tr></table></figure></p><p>如果成功运行则安装成功。</p><p>终端怎么打开？<br><strong>Windows</strong> 徽标键+R -&gt; 运行cmd<br><strong>Mac</strong> Mac 的 Terminal 终端位于 LaunchPad 中，你一定能找到一个叫”终端”的东西对不对？没错，点开它！<br><strong>Linux</strong> 这个可以设置快捷键的，爱折腾的大佬一定没问题。</p><p>如果安装成功了，不知道你还记不记得上一次提到的Python之禅，我们可以在Python中看到它，只需要执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import this</span><br></pre></td></tr></table></figure></p><p>就能在屏幕上看到传说中的Python之禅啦。<strong>ps</strong>: 记得要在终端中打开Python之后执行此代码。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我们一起学Python-Python简介</title>
      <link href="/2018/09/01/Python-0-Python%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/09/01/Python-0-Python%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h2 id="Python是什么？"><a href="#Python是什么？" class="headerlink" title="Python是什么？"></a>Python是什么？</h2><p>简单来说，它是一种计算机编程语言及一套配套的软件工具和库。Python最初由Guido van Rossum于20世纪90年代初开发，当前由世界各地数十位程序员（包括van Rossum）负责维护。Python官网为：<a href="https://www.python.org" target="_blank" rel="noopener">https://www.python.org</a></p><a id="more"></a><h2 id="Python的一些特点"><a href="#Python的一些特点" class="headerlink" title="Python的一些特点"></a>Python的一些特点</h2><h3 id="易于学习和理解"><a href="#易于学习和理解" class="headerlink" title="易于学习和理解"></a>易于学习和理解</h3><p>相比于用其他大多数编程语言编写的程序，Python程序更整洁：Python几乎没有多余的符号，且使用的是简单易懂的英语名称。</p><h3 id="效率极高"><a href="#效率极高" class="headerlink" title="效率极高"></a>效率极高</h3><p>精通Python后，与使用其他大多数编程语言相比，使用Python可在更短的时间内完成更多的工作。Python支持但不强制你使用面向对象编程。</p><h3 id="开箱即可使用"><a href="#开箱即可使用" class="headerlink" title="开箱即可使用"></a>开箱即可使用</h3><p>Python自带了各种现成的库，供你在自己的程序中使用。</p><h3 id="易于维护"><a href="#易于维护" class="headerlink" title="易于维护"></a>易于维护</h3><p>Python程序理解和修改起来相对容易，程序员可轻松地确保它们紧跟潮流。</p><h2 id="Python-2-x-or-Python-3-X"><a href="#Python-2-x-or-Python-3-X" class="headerlink" title="Python 2.x or Python 3.X ?"></a>Python 2.x or Python 3.X ?</h2><p>Python现在有两个版本，Python2和Python3，两者语法稍有不同，并且互不兼容。作者在后面的学习中用到的是Python3，所以如果你不使用基于Python2的类库的话，那么我们就一起使用Python3进行学习吧！</p><h2 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h2><p>Python之禅可以说是完美的诠释了Python的特性：优雅、明确、简洁。我们日后写代码的时候千万不要忘了这个中心思想哦～</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Beautiful is better than ugly.</span><br><span class="line"># 优美胜于丑陋（Python以编写优美的代码为目标）</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line"># 明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似） </span><br><span class="line">Simple is better than complex.</span><br><span class="line"># 简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现） </span><br><span class="line">Complex is better than complicated.</span><br><span class="line"># 复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class="line">Flat is better than nested.</span><br><span class="line"># 扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套） </span><br><span class="line">Sparse is better than dense.</span><br><span class="line"># 间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题） </span><br><span class="line">Readability counts.</span><br><span class="line"># 可读性很重要（优美的代码是可读的） </span><br><span class="line">Special cases aren't special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line"># 即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上） </span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line"># 不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写except:pass风格的代码） </span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line"># 当存在多种可能，不要尝试去猜测 </span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line"># 而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法） </span><br><span class="line">Although that way may not be obvious at first unless you're Dutch.</span><br><span class="line"># 虽然这并不容易，因为你不是 Python 之父（这里的Dutch是指Guido）</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line"># 做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span><br><span class="line">If the implementation is hard to explain, it's a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line"># 如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准） </span><br><span class="line">Namespaces are one honking great idea -- let's do more of those!</span><br><span class="line"># 命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode-196.删除重复的电子邮箱(Delete Duplicate Emails)</title>
      <link href="/2018/07/11/leetcode-196-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1-Delete-Duplicate-Emails/"/>
      <url>/2018/07/11/leetcode-196-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1-Delete-Duplicate-Emails/</url>
      <content type="html"><![CDATA[<p>编写一个 SQL 查询，来删除 <code>Person</code> 表中所有重复的电子邮箱，重复的邮箱里只保留 <strong>Id</strong> <em>最小</em> 的那个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">Id 是这个表的主键。</span><br></pre></td></tr></table></figure><p>例如，在运行你的查询语句之后，上面的 <code>Person</code> 表应返回以下几行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode-180.连续出现的数字(Consecutive Numbers) </title>
      <link href="/2018/07/11/leetcode-180-%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0%E5%AD%97-Consecutive-Numbers/"/>
      <url>/2018/07/11/leetcode-180-%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0%E5%AD%97-Consecutive-Numbers/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+----+-----+</span><br><span class="line">| Id | Num |</span><br><span class="line">+----+-----+</span><br><span class="line">| 1  |  1  |</span><br><span class="line">| 2  |  1  |</span><br><span class="line">| 3  |  1  |</span><br><span class="line">| 4  |  2  |</span><br><span class="line">| 5  |  1  |</span><br><span class="line">| 6  |  2  |</span><br><span class="line">| 7  |  2  |</span><br><span class="line">+----+-----+</span><br></pre></td></tr></table></figure><p>例如，给定上面的 <code>Logs</code> 表， <code>1</code> 是唯一连续出现至少三次的数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+</span><br><span class="line">| ConsecutiveNums |</span><br><span class="line">+-----------------+</span><br><span class="line">| 1               |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="sql代码"><a href="#sql代码" class="headerlink" title="sql代码"></a>sql代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> a.num <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">logs</span> <span class="keyword">as</span> a, <span class="keyword">logs</span> <span class="keyword">as</span> b, <span class="keyword">logs</span> <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">where</span> a.id = b.id + <span class="number">1</span> <span class="keyword">and</span> a.id = c.id + <span class="number">2</span> <span class="keyword">and</span></span><br><span class="line">      a.Num = b.Num <span class="keyword">and</span> a.Num = c.Num</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode-178.分数排名(Rank Scores) </title>
      <link href="/2018/07/11/leetcode-178-%E5%88%86%E6%95%B0%E6%8E%92%E5%90%8D-Rank-Scores/"/>
      <url>/2018/07/11/leetcode-178-%E5%88%86%E6%95%B0%E6%8E%92%E5%90%8D-Rank-Scores/</url>
      <content type="html"><![CDATA[<hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p>例如，根据上述给定的 <code>Scores</code> 表，你的查询应该返回（按分数从高到低排列）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+------+</span><br><span class="line">| Score | Rank |</span><br><span class="line">+-------+------+</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.50  | 4    |</span><br><span class="line">+-------+------+</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="sql代码"><a href="#sql代码" class="headerlink" title="sql代码"></a>sql代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Score,  (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> Score) </span><br><span class="line">    <span class="keyword">from</span> Scores <span class="keyword">as</span> s2 </span><br><span class="line">    <span class="keyword">where</span> s2.Score &gt;= s1.Score) <span class="keyword">as</span> <span class="keyword">Rank</span>   </span><br><span class="line"><span class="keyword">from</span> Scores <span class="keyword">as</span> s1  </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode-177.第N高的薪水(Nth Highrst Salary)</title>
      <link href="/2018/07/11/leetcode-177-%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4-Nth-Highrst-Salary/"/>
      <url>/2018/07/11/leetcode-177-%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4-Nth-Highrst-Salary/</url>
      <content type="html"><![CDATA[<hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第 <em>n</em> 高的薪水（Salary）。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><p>例如上述 <code>Employee</code> 表，<em>n = 2</em> 时，应返回第二高的薪水 <code>200</code>。如果不存在第 <em>n</em> 高的薪水，那么查询应返回 <code>null</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 200                    |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="sql代码"><a href="#sql代码" class="headerlink" title="sql代码"></a>sql代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span>  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">  <span class="keyword">declare</span> m <span class="built_in">int</span>;  </span><br><span class="line">  <span class="keyword">set</span> m = N - <span class="number">1</span>;  </span><br><span class="line">  RETURN (  </span><br><span class="line">      # Write your MySQL query statement below.  </span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">distinct</span> Salary </span><br><span class="line">      <span class="keyword">from</span> Employee</span><br><span class="line">      <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span> </span><br><span class="line">      <span class="keyword">limit</span> m,<span class="number">1</span>  </span><br><span class="line">  );  </span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="学到的东西"><a href="#学到的东西" class="headerlink" title="学到的东西"></a>学到的东西</h3><p>limit的用法<br>declare<br>set</p>]]></content>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构之二叉树</title>
      <link href="/2018/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h2 id="1-二叉树基本概念"><a href="#1-二叉树基本概念" class="headerlink" title="1. 二叉树基本概念"></a>1. 二叉树基本概念</h2><p>二叉树是树的特殊一种，具有如下特点：1、每个结点最多有两颗子树，结点的度最大为2。2、左子树和右子树是有顺序的，次序不能颠倒。3、即使某结点只有一个子树，也要区分左右子树。</p><a id="more"></a><h2 id="2-二叉树性质"><a href="#2-二叉树性质" class="headerlink" title="2. 二叉树性质"></a>2. 二叉树性质</h2><h2 id="3-二叉树遍历"><a href="#3-二叉树遍历" class="headerlink" title="3. 二叉树遍历"></a>3. 二叉树遍历</h2><p>遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。</p><p>设L、D、R分别表示遍历左子树、访问根结点和遍历右子树， 则对一棵二叉树的遍历有三种情况：DLR（称为先根次序遍历），LDR（称为中根次序遍历），LRD （称为后根次序遍历）。</p><h3 id="3-1-先序遍历（DLR）"><a href="#3-1-先序遍历（DLR）" class="headerlink" title="3.1 先序遍历（DLR）"></a>3.1 先序遍历（DLR）</h3><p>基本思想：先访问根结点，再先序遍历左子树，最后再先序遍历右子树即根—左—右。</p><p><img src="数据结构之二叉树/先序遍历.jpg" alt="先序遍历"></p><p>前序遍历(preorder traversal) Python实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class TreeNode:</span><br><span class="line">    def __init__(self, x):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"><span class="comment"># 前序遍历</span></span><br><span class="line">    def preTraversal(self, root):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type root: ListNode</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root == None:</span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="built_in">print</span>(root.val)</span><br><span class="line">        self.preTraverse(root.left)</span><br><span class="line">        self.preTraverse(root.right)</span><br></pre></td></tr></table></figure><h3 id="3-2-中序遍历（LDR）"><a href="#3-2-中序遍历（LDR）" class="headerlink" title="3.2 中序遍历（LDR）"></a>3.2 中序遍历（LDR）</h3><p>基本思想：先中序遍历左子树，然后再访问根结点，最后再中序遍历右子树即左—根—右。</p><p><img src="数据结构之二叉树/中序遍历.jpg" alt="中序遍历"></p><p>中序遍历(inorder traversal) Python实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class TreeNode:</span><br><span class="line">    def __init__(self, x):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"><span class="comment"># 中序遍历</span></span><br><span class="line">    def inTraversal(self, root):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type root: ListNode</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root == None:</span><br><span class="line">            <span class="built_in">return</span>   </span><br><span class="line">        self.preTraverse(root.left)</span><br><span class="line">        <span class="built_in">print</span>(root.val)</span><br><span class="line">        self.preTraverse(root.right)</span><br></pre></td></tr></table></figure><h3 id="3-3-后序遍历（LRD）"><a href="#3-3-后序遍历（LRD）" class="headerlink" title="3.3 后序遍历（LRD）"></a>3.3 后序遍历（LRD）</h3><p>基本思想：先后序遍历左子树，然后再后序遍历右子树，最后再访问根结点即左—右—根。</p><p><img src="数据结构之二叉树/后序遍历.jpg" alt="后序遍历"></p><p>后序遍历(postorder traversal) Python实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class TreeNode:</span><br><span class="line">    def __init__(self, x):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"><span class="comment"># 后序遍历</span></span><br><span class="line">    def postTraversal(self, root):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type root: ListNode</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root == None:</span><br><span class="line">            <span class="built_in">return</span>   </span><br><span class="line">        self.preTraverse(root.left)</span><br><span class="line">        self.preTraverse(root.right)</span><br><span class="line">        <span class="built_in">print</span>(root.val)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode-7.反转整数(Reverse Integer)</title>
      <link href="/2018/06/13/leetcode-7-%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0-Reverse-Integer/"/>
      <url>/2018/06/13/leetcode-7-%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0-Reverse-Integer/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 32 位有符号整数，将整数中的数字进行反转。<br><a id="more"></a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:<br>输入: 123<br>输出: 321</p><p>示例 2:<br>输入: -123<br>输出: -321</p><p>示例 3:<br>输入: 120<br>输出: 21</p><p>注意:<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h2 id="关键代码-Python"><a href="#关键代码-Python" class="headerlink" title="关键代码(Python)"></a>关键代码(Python)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def reverse(self, x):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        s = str(abs(x))</span><br><span class="line">        r = int(s[::-1])</span><br><span class="line">        <span class="keyword">if</span> -2 ** 31 &lt; r &lt; 2 ** 31 - 1:</span><br><span class="line">            <span class="keyword">if</span> x &gt;= 0:</span><br><span class="line">                <span class="built_in">return</span> r</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">return</span> -r</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> 0</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>leetcode-1.两数之和(Two Sum)</title>
      <link href="/2018/06/13/leetcode-1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C(Two%20Sum)/"/>
      <url>/2018/06/13/leetcode-1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C(Two%20Sum)/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p><p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。<br><a id="more"></a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>遍历2遍数组，从第0个元素开始，依次尝试其后面的元素与之相加有无满足目标值的情况。</p><h3 id="尝试代码-Python3"><a href="#尝试代码-Python3" class="headerlink" title="尝试代码(Python3)"></a>尝试代码(Python3)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line"><span class="comment"># 方法一 遍历两次数组</span></span><br><span class="line">        l = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(l-1):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+1,l):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="built_in">return</span> i,j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    n = [3, 2, 4, 11, 15]</span><br><span class="line">    t = 6</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="built_in">print</span>(s.twoSum(n, t))</span><br></pre></td></tr></table></figure><p>我们先自己在本地运行一下，运行结果没问题之后，提交到leetcode。<br>注意：只需要提交Solution部分就行。<br>果不其然，这种遍历两次数组的土办法真的是太慢了。leetcode返回的结果为：执行20个测试用例花了7276ms。<br>真的是太慢了–!<br>于是我们又有了第二种想法……</p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>可不可以只遍历一次数组呢？<br>用目标值减去当前元素，然后找出得到的值在数组中的位置。</p><h3 id="尝试代码-Python3-1"><a href="#尝试代码-Python3-1" class="headerlink" title="尝试代码(Python3)"></a>尝试代码(Python3)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        <span class="comment"># 方法二 遍历一次数组</span></span><br><span class="line">        l = range(len(nums))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">            temp = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> temp <span class="keyword">in</span> nums and nums.index(temp) != i:</span><br><span class="line">                <span class="built_in">return</span> i, nums.index(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    n = [3, 2, 4, 11, 15]</span><br><span class="line">    t = 6</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="built_in">print</span>(s.twoSum(n, t))</span><br></pre></td></tr></table></figure><p>这次的运行结果比上次好一点点，用了1400ms,好像还是有点慢儿<br>难道我们要排序？不行！太费脑子了！<br>看了排名较靠前的解决方法，真的是清清爽爽！请看方法三</p><h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><p>字典，类似方法二，用目标值减去数组元素得到结果，将结果与数组元素的位置存入字典中。<br>若有结果在字典中，则会满足 字典中结果 + 当前数组元素 = 目标值，返回字典中结果产生时对应数组元素的位置与当前数组元素的位置。<br>好像有点绕？emmm…好好消化一下</p><h3 id="尝试代码-Python3-2"><a href="#尝试代码-Python3-2" class="headerlink" title="尝试代码(Python3)"></a>尝试代码(Python3)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line"><span class="comment"># 方法三 使用字典</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="built_in">print</span>(i,num)</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> d:</span><br><span class="line">                <span class="built_in">return</span> [d[target - num], i]</span><br><span class="line">            d[num] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    n = [3, 2, 4, 11, 15]</span><br><span class="line">    t = 6</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="built_in">print</span>(s.twoSum(n, t))</span><br></pre></td></tr></table></figure><p>本地测试没啥问题，提交！<br>40ms！！！<br>从7000ms提高到了40ms，虽然每次提交返回的时间稍有不同，但是，用了字典以后真的是快了不少。<br>关于字典的详细内容可以到一起学Python分类中查看（可能还没更新到那儿）。<br>以上。</p>]]></content>
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
